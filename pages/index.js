import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import KwikpassSSOButton from "./components/KwikpassSSOButton";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [step, setStep] = useState(1);
  const [isLogin, setIsLogin] = useState(false);
  const [formData, setFormData] = useState({});

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    if (step === 1 && formData.phone) {
      // Simulate OTP sending
      const sendOTPResponse = await loginFunctions.kpSendOTP(formData.phone);
      if (sendOTPResponse?.status == 200) {
        setStep(2);
      } else {
        alert(`Error: ${sendOTPResponse}`);
      }
    } else {
      // Simulate OTP verification
      const verifyOTPResponse = await loginFunctions.kpVerifyOTP({
        phone: formData.phone,
        otp: parseInt(formData.otp, 10),
      });
      if (verifyOTPResponse.status == 200) {
        console.log("User logged in successfully");
        setStep(3);
        setIsLogin(true);
      } else {
        alert(verifyOTPResponse?.message);
      }
    }
  };
  const handleLogout = () => {
    loginFunctions.handleKPLogout();
  };
  const getKpMerchantToken = async () => {
    const token = await loginFunctions.kpCustomMerchantLogin();
    if (token) {
      // do something
      console.log(token);
    }
  };
  useEffect(() => {
    if (localStorage.getItem("SANDBOXKWIKSESSIONTOKEN") !== null) {
      setStep(3);
      setIsLogin(true);
    }
    //   console.log('use effect');
    //   const handleCustomEvent = (event) => {
    //     if(event?.detail?.type === 'user-loggedin'){
    //         setStep(3);
    //         setIsLogin(true)
    //     } else if(event?.detail?.type === 'user-logout'){
    //         setStep(1);
    //         setIsLogin(false)
    //     }
    //     console.log('user-loggedin event fired', event);

    //   }
    //  window.addEventListener("kp-custom-merchant", handleCustomEvent)
    //   return () => {
    //     console.log('Cleanup function called');
    //   };
  }, []);

  useEffect(() => {
    console.log("use effect -> send page view event");
    const collectionPageViewEvent = new CustomEvent("page_view_kp", {
      detail: {
        type: "collection",
        data: {
          collection_handle: "product-category",
          collection_name: "product-category",
          collection_id: "45678765456",
          img_url:
            "https://d20ce51t0ju3pt.cloudfront.net/images/single-product-images/fast-up-fusion-tech-protein-elevate-clinically-tested-for-2x-faster-absorption-1-1528_1692704801.webp",
        },
      },
    });

    window.dispatchEvent(collectionPageViewEvent);
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <div className={styles.logo}>Kwikpass</div>
        <nav className={styles.nav}>
          {isLogin ? (
            <>
              <button className={styles.button} onClick={getKpMerchantToken}>
                SSO Login
              </button>{" "}
              <button className={styles.button} id="account">
                Account
              </button>
              <button className={styles.button} id="logout" onClick={handleLogout}>
                Logout
              </button>
            </>
          ) : (
            <button className={styles.button} id="login">
              Login
            </button>
          )}
        </nav>
      </header>
      <h1 className={styles.heading}>Custom store in NextJS with headless integration</h1>
      <main className={`${styles.main} ${inter.className}`}>
        {step === 3 ? (
          <h2>You're Loggedin Now...</h2>
        ) : (
          <section className={styles.loginSection}>
            {step === 2 && (
              <button className={styles.backButton} onClick={() => setStep(1)}>
                Go back
              </button>
            )}{" "}
            <h2>Login</h2>
            <form onSubmit={handleLoginSubmit} className={styles.loginForm}>
              {step === 1 && (
                <input
                  type="tel"
                  name="phone"
                  minLength={10}
                  maxLength={10}
                  required
                  value={formData.phone}
                  placeholder="Enter phone number"
                  onChange={(e) => setFormData((prev) => ({ ...prev, phone: e.target.value }))}
                  className={styles.input}
                />
              )}
              {step === 2 && (
                <input
                  type="number"
                  name="otp"
                  value={formData.otp}
                  onChange={(e) => setFormData((prev) => ({ ...prev, otp: e.target.value }))}
                  minLength={4}
                  maxLength={4}
                  placeholder="Enter OTP number"
                  className={styles.input}
                />
              )}
              <button type="submit" className={styles.submitButton}>
                Submit
              </button>
              <KwikpassSSOButton title={"sso-login"} status={false} />
            </form>
          </section>
        )}
      </main>
    </>
  );
}
